#include "dsk6416_aic23.h" //codec support
#include <math.h>
#include "stdio.h"
#include "stdlib.h"
#include "math.h"
#include "complex_number.h"
#include "W_matrix.h"

Uint32 fs = DSK6416_AIC23_FREQ_8KHZ; //set sampling rate
#define DSK6416_AIC23_INPUT_MIC 0x0015
#define DSK6416_AIC23_INPUT_LINE 0x0011
Uint16 inputsource=DSK6416_AIC23_INPUT_LINE; //select input

//#define freq_dip1 1000
#define SAMPLE_RATE 8000
#define N 256
#define PI 3.1415926
#define branch 2
#define way 12
#define iter 10
#define sub 8

COMPLEX twiddle[N];
COMPLEX twiddlei[N];

COMPLEX A[N], B[N], C[N], D[N], E[N], F[N];
COMPLEX *in_buffer, *out_buffer, *out_buffer_R, *input_time, *output_time1, *output_time2;
COMPLEX zeroc;

float H[branch * way], H_init[branch * way], W_col_sum[branch * way], WtV[branch * way];
float V[N / 2 + 1], WHmul[N / 2 + 1], Mask[N / 2 + 1];
float re, im, mag;

int row_sub, mul_sub;
int ind_in = 0, ind_out = 0;
int fill = 0, fill_c = 0;
int fft_c = 0, fft_c_l = 0, fft_c_r = 0;
int stft2v = 0, w_sum = 0;
int nmf_c = 0;
int nmf_iter_num = 0, stage = 0;
int nmf_no = 0;
int div_o = 0, div_1 = 0, div_2 = 0;
int mul, brwa, half_N;
int num_of_init = 0;

int ind_fft;

int upper_leg, lower_leg;
int leg_diff;
int num_stages = 0;
int index, step;

void fft_step(int ind, COMPLEX *Y, int M, COMPLEX *w)
{
	int i, j, k;
	COMPLEX temp1, temp2;
	if(ind == -1)
	{
		i = 1;
		do
		{
			num_stages += 1;
			i = i * 2;
		} while (i != M);
		leg_diff = M / 2;
		step = 2;
		return;
	}
	else if(ind == num_stages)
	{
		j = 0;
		for (i = 1; i<(M - 1); i++)   //bit reversal for resequencing data
		{
			k = M / 2;
			while (k <= j)
			{
				j = j - k;
				k = k / 2;
			}
			j = j + k;
			if (i<j)
			{
				temp1.real = (Y[j]).real;
				temp1.imag = (Y[j]).imag;
				(Y[j]).real = (Y[i]).real;
				(Y[j]).imag = (Y[i]).imag;
				(Y[i]).real = temp1.real;
				(Y[i]).imag = temp1.imag;
			}
		}
		return;
	}
	
	index = 0;
	for (j = 0; j<leg_diff; j++)
	{
		for (upper_leg = j; upper_leg<M; upper_leg += (2 * leg_diff))
		{
			lower_leg = upper_leg + leg_diff;
			temp1.real = (Y[upper_leg]).real + (Y[lower_leg]).real;
			temp1.imag = (Y[upper_leg]).imag + (Y[lower_leg]).imag;
			temp2.real = (Y[upper_leg]).real - (Y[lower_leg]).real;
			temp2.imag = (Y[upper_leg]).imag - (Y[lower_leg]).imag;
			(Y[lower_leg]).real = ((temp2.real)*(w[index]).real
				- (temp2.imag)*(w[index]).imag);
			(Y[lower_leg]).imag = ((temp2.real)*(w[index]).imag
				+ (temp2.imag)*(w[index]).real);
			(Y[upper_leg]).real = temp1.real;
			(Y[upper_leg]).imag = temp1.imag;
		}
		index += step;
	}
	leg_diff = leg_diff / 2;
	step *= 2;
	
	return;
}

void nmf_w_sum(int ind)
{
	int i;
	if(ind == 0)
	{
		for(i = 0; i < brwa; i++)
			W_col_sum[i % brwa] += W[i];
	}
	int start = brwa + ind * mul_sub;
	for(i = start; i < start + mul_sub; i++)
		W_col_sum[i % brwa] += W[i];
}

void nmf_iter_1(int ind)
{
	int i;
	if(ind == 0)
	{
		//for(i = 0; i < half_N; i++)
			//printf("%f\n", WHmul[i]);
		for(i = 0; i < brwa; i++)
		{
			WHmul[0] += W[i] * H[i];
		}
	}
	int start = brwa + ind * mul_sub;
	for(i = start; i < start + mul_sub; i++)
	{
		//printf("%d ", i);
		WHmul[i / brwa] += W[i] * H[i % brwa];
	}
	//printf("\n");
	if(ind == sub - 1)
	{
		for(i = 0; i < half_N; i++)
		{
			if(WHmul[i] < 0.005)
			{
				//printf("a\n");
				WHmul[i] = V[i] * 200;
			}
			else
				WHmul[i] = V[i] / WHmul[i];
		}
	}
}

void nmf_iter_2(int ind)
{
	int i;
	if(ind == 0)
	{
		//printf("%f ", WtV[0]);
		//printf("\n");
		for(i = 0; i < brwa; i++)
		{
			WtV[i] = W[i] * WHmul[0];
		}
	}
	int start = brwa + ind * mul_sub;
	for(i = start; i < start + mul_sub; i++)
	{
		WtV[i % brwa] += W[i] * WHmul[i / brwa];
	}
	if(ind == sub - 1)
	{
		for(i = 0; i < brwa; i++)
		{
			H[i] = H[i] *  WtV[i] / W_col_sum[i];
		}
	}
}

void divide_pre(int ind)
{
	int i;
	if(ind == 0)
	{
		for(i = 0; i < brwa; i++)
		{
			WHmul[0] += W[i] * H[i];
		}
	}
	int start = brwa + ind * mul_sub;
	for(i = start; i < start + mul_sub; i++)
	{
		WHmul[i / brwa] += W[i] * H[i % brwa];
	}
	if(ind == sub - 1)
	{
		for(i = 0; i < half_N; i++)
		{
			if(WHmul[i] < 0.005)
			{
				WHmul[i] = 0.005;
			}
			Mask[i] = 0;
		}
	}
}

void divide_1_a(int ind)
{
	int i = 0, j = 0;
	if(ind == 0)
	{
		for(i = 0; i < way; i++)
		{
			Mask[0] += W[i] * H[i];
		}
	}
	int start = brwa + ind * mul_sub * 2;
	i = start;
	while(i < start + mul_sub * 2)
	{
		Mask[i / brwa] += W[i] * H[j];
		i++; j++;
		if(j == way)
		{
			i += way;
			j = 0;
		}
	}
}

void divide_1_b()
{
	int i;
	for(i = 0; i < half_N; i++)
	{
		mag = Mask[i] / WHmul[i];
		//printf("%f, %f, %f\n", Mask[i], WHmul[i], mag);
		output_time1[i].real = mag * input_time[i].real;
		output_time1[i].imag = mag * input_time[i].imag;
		if(i == 0 || i == half_N - 1)
			continue;
		output_time1[N - i].real = mag * input_time[N - i].real;
		output_time1[N - i].imag = mag * input_time[N - i].imag;
	}
}

void divide_2(int ind)
{
	int i;
	if(ind == 0)
	{
		for(i = 0; i < half_N; i++)
			Mask[i] = 0;
		for(i = way; i < brwa; i++)
		{
			Mask[0] += W[i] * H[i];
		}
	}
	int start = brwa + ind * mul_sub * 2 + way;
	i = start;
	while(i < start + mul_sub * 2)
	{
		//printf("%d ", i);
		Mask[i / brwa] += W[i] * H[i % brwa];
		i++;
		if(i % brwa == 0) i += way;
	}
	//printf("\n");
	if(ind == sub / 2 - 1)
	{
		for(i = 0; i < half_N; i++)
		{
			mag = Mask[i] / WHmul[i];
			//printf("%f, %f, %f\n", Mask[i], WHmul[i], mag);
			output_time2[i].real = mag * input_time[i].real;
			output_time2[i].imag = mag * input_time[i].imag;
			if(i == 0 || i == half_N - 1)
				continue;
			output_time2[N - i].real = mag * input_time[N - i].real;
			output_time2[N - i].imag = mag * input_time[N - i].imag;
		}
	}
}

interrupt void c_int11()
{
	int input, output;
	short in_sample, out_sample, out_sampleL, out_sampleR;

	input = input_sample();
	in_sample = (input & 0xFFFF);
   	
   	int i, j, k;
   	
   	if(fft_c_r == 1) // right ifft
   	{
   		fft_step(ind_fft, output_time2, N, twiddlei);
   		if(ind_fft < num_stages)
   		{
   			ind_fft++;
   		}
   		else
   		{
   			fft_c_r = 0;
			ind_fft = -1;
			num_stages = 0;
   		}
   	}
   	
   	if(fft_c_l == 1) // left ifft
   	{
   		fft_step(ind_fft, output_time1, N, twiddlei);
   		if(ind_fft < num_stages)
   		{
   			ind_fft++;
   		}
   		else
   		{
   			fft_c_l = 0;
			ind_fft = -1;
   			num_stages = 0;
   			fft_c_r = 1;
   		}
   	}
   	
   	if(div_2 > 0)
   	{
   		divide_2(div_2 - 1);
   		if(div_2 < sub / 2)
   		{
   			div_2++;
   		}
   		else
   		{
   			div_2 = 0;
   			ind_fft = -1;
   			num_stages = 0;
   			fft_c_l = 1;
   		}
   	}
   	
   	if(div_1 > 0)
   	{
   		if(div_1 < sub / 2 + 1)
   		{
   			divide_1_a(div_1 - 1);
   			div_1++;
   		}
   		else
   		{
   			divide_1_b();
   			div_1 = 0;
   			div_2 = 1;
   		}
   	}
   	
   	if(div_o > 0)
   	{
   		divide_pre(div_o - 1);
   		if(div_o < sub)
   		{
   			div_o++;
   		}
   		else
   		{
   			div_o = 0;
   			div_1 = 1;
   		}
   	}
   	
   	if(nmf_c > 0) // nmf iteration
   	{
   		if(nmf_c < sub + 1)
   		{
   			nmf_iter_1(nmf_c - 1);
   		}
   		else if(nmf_c < sub * 2 + 1)
   		{
   			nmf_iter_2(nmf_c - 5);
   		}
   		nmf_c++;
   		if(nmf_c == 9)
   		{
   			if(nmf_iter_num < iter - 1)
   			{
   				nmf_c = 1;
   				nmf_iter_num++;
   			}
   			else
   			{
   				nmf_iter_num = 0;
   				nmf_c = 0;
   				div_o = 1;
   			}
   			for(i = 0; i < half_N; i++)
			{
				WHmul[i] = 0;
			}
   		}
   	}
   	
   	if(w_sum > 0)// W matrix column sum
   	{
   		nmf_w_sum(w_sum - 1);
   		if(w_sum < sub)
   		{
   			w_sum++;
   		}
   		else
   		{
			w_sum = 0;
   			nmf_c = 1;
   			nmf_iter_num = 0;
   		}
   	}
   	
   	
   	if(stft2v == 1) // get V matrix
   	{
   		stft2v = 0;
   		for(i = 0; i < half_N; i++)
   		{
   			re = input_time[i].real; im = input_time[i].imag;
   			mag = sqrt(re * re + im * im);
   			V[i] = mag;
   			WHmul[i] = 0;
   		}
   		w_sum = 1;
   	}
   	
   	if(fill == 1) // fft
   	{
   		fft_step(ind_fft, input_time, N, twiddle);
   		if(ind_fft < num_stages)
   		{
   			ind_fft++;
   		}
   		else
   		{
   			fill = 0;
   			for(i = 0; i < brwa; i++)
   			{
   				W_col_sum[i] = 0;
   				WtV[i] = 0;
   				H[i] = H_init[i];
   			}
   			ind_fft = -1;
   			num_stages = 0;
   			stft2v = 1;
   		}
   	}

   	in_buffer[ind_in].real = (float)(in_sample) * 10;
	in_buffer[ind_in++].imag = 0;

   	if(DSK6416_DIP_get(0)==0)
   	{
   		out_sampleL = (short)(out_buffer[ind_out].real / N / 10);
   		out_sampleR = (short)(out_buffer_R[ind_out++].real / N / 10);
   	}
   	else if(DSK6416_DIP_get(1)==0)
   	{
   		out_sampleL = (short)(out_buffer[ind_out].real / N / 10 + out_buffer_R[ind_out].real / N / 10);
   		out_sampleR = (short)(out_buffer[ind_out].real / N / 10 + out_buffer_R[ind_out].real / N / 10);
		ind_out++;
   	}
   	else if(DSK6416_DIP_get(2)==0)
   	{
   		//printf("%f\n", out_buffer[ind_out].real);
   		out_sampleL = (short)(out_buffer[ind_out].real / N / 10);
   		out_sampleR = (short)(out_buffer[ind_out++].real / N / 10);
   	}
   	else if(DSK6416_DIP_get(3)==0)
   	{
   		out_sampleL = (short)(out_buffer_R[ind_out].real / N / 10);
   		out_sampleR = (short)(out_buffer_R[ind_out++].real / N / 10);
   	}
   	else
   	{
   		out_sampleL = (short)in_sample;
   		out_sampleR = (short)in_sample;
   	}
   	
   	if(ind_in >= N) // Frame in
   	{
   		ind_in = 0; ind_out = 0;
   		COMPLEX* te = out_buffer;
		out_buffer = output_time1;
		output_time1 = te;
   		te = out_buffer_R;
		out_buffer_R = output_time2;
		output_time2 = te;
   		te = in_buffer;
   		in_buffer = input_time;
		input_time = te;
		ind_fft = -1;
   		fill = 1;
   	}
   	
	output = (0x0000FFFF & out_sampleL) | 
    	        (0xFFFF0000 & (out_sampleR << 16));
	output_sample(output);
	return;
}

void twiddle_ge()
{
	int n;
	for (n = 0; n < N; n++)
	{
		twiddle[n].real = 1 * cos(PI * n / N);
		twiddle[n].imag = -1 * sin(PI * n / N);
		twiddlei[n].real = 1 * cos(PI * n / N);
		twiddlei[n].imag = 1 * sin(PI * n / N);
	}
}

void W_rand(int stage)
{
	int i, j;
	if(stage == 1)
	{
		for(i = 0; i < N / 2 + 1; i++)
		{
			for(j = 0; j < branch * way; j++)
			{
				float temp = (float)(rand() % 1000);
				W[(branch * way) * i + j] = 1 + temp / 1000;
			}
		}
	}
	for(i = 0; i < branch * way; i++)
	{
		float temp = (float)(rand() % 100);
		H_init[i] = 1 + temp / 100;
		H[i] = H_init[i];
	}
}

void WH_norm()
{
	int i;
	for(i = 0; i < way * branch; i++)
		W_col_sum[i] = 0;
	for(i = 0; i < (N / 2 + 1) * way * branch; i++)
		W_col_sum[i % (way * branch)] += W[i];
	for(i = 0; i < (N / 2 + 1) * way * branch; i++)
	{
		W[i] = W[i] / W_col_sum[i % (way * branch)];
	}
	for(i = 0; i < way * branch; i++)
	{
		H[i] *= W_col_sum[i];
		H_init[i] *= W_col_sum[i];
	}
}

void main()
{
	int i;
	brwa = way * branch;
	mul = (N / 2 + 1) * brwa;
	half_N = (N / 2 + 1);
	row_sub = half_N / sub;
	mul_sub = row_sub * brwa;
	twiddle_ge();
	W_rand(0);
	zeroc.real = 0;
	zeroc.imag = 0;
	for(i = 0; i < N; i++)
	{
		A[i].real = 0; B[i].real = 0;
		A[i].imag = 0; B[i].imag = 0;
		C[i].real = 0; C[i].imag = 0;
		D[i].real = 0; E[i].real = 0;
		D[i].imag = 0; E[i].imag = 0;
		F[i].real = 0; F[i].imag = 0;
	}
	
	in_buffer = &A[0];
	out_buffer = &B[0];
	out_buffer_R = &C[0];

	input_time = &D[0];
	output_time1 = &E[0];
	output_time2 = &F[0];
	
	DSK6416_DIP_init();
	comm_intr();
	while(1);
}